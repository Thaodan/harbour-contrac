// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: contrac.proto

#include "contrac.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_contrac_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SignatureInfo_contrac_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_contrac_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TEKSignature_contrac_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_contrac_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TemporaryExposureKey_contrac_2eproto;
namespace diagnosis {
class TemporaryExposureKeyExportDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TemporaryExposureKeyExport> _instance;
} _TemporaryExposureKeyExport_default_instance_;
class SignatureInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SignatureInfo> _instance;
} _SignatureInfo_default_instance_;
class TemporaryExposureKeyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TemporaryExposureKey> _instance;
} _TemporaryExposureKey_default_instance_;
class TEKSignatureListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TEKSignatureList> _instance;
} _TEKSignatureList_default_instance_;
class TEKSignatureDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TEKSignature> _instance;
} _TEKSignature_default_instance_;
}  // namespace diagnosis
static void InitDefaultsscc_info_SignatureInfo_contrac_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::diagnosis::_SignatureInfo_default_instance_;
    new (ptr) ::diagnosis::SignatureInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::diagnosis::SignatureInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SignatureInfo_contrac_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SignatureInfo_contrac_2eproto}, {}};

static void InitDefaultsscc_info_TEKSignature_contrac_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::diagnosis::_TEKSignature_default_instance_;
    new (ptr) ::diagnosis::TEKSignature();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::diagnosis::TEKSignature::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TEKSignature_contrac_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TEKSignature_contrac_2eproto}, {
      &scc_info_SignatureInfo_contrac_2eproto.base,}};

static void InitDefaultsscc_info_TEKSignatureList_contrac_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::diagnosis::_TEKSignatureList_default_instance_;
    new (ptr) ::diagnosis::TEKSignatureList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::diagnosis::TEKSignatureList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TEKSignatureList_contrac_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TEKSignatureList_contrac_2eproto}, {
      &scc_info_TEKSignature_contrac_2eproto.base,}};

static void InitDefaultsscc_info_TemporaryExposureKey_contrac_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::diagnosis::_TemporaryExposureKey_default_instance_;
    new (ptr) ::diagnosis::TemporaryExposureKey();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::diagnosis::TemporaryExposureKey::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TemporaryExposureKey_contrac_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TemporaryExposureKey_contrac_2eproto}, {}};

static void InitDefaultsscc_info_TemporaryExposureKeyExport_contrac_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::diagnosis::_TemporaryExposureKeyExport_default_instance_;
    new (ptr) ::diagnosis::TemporaryExposureKeyExport();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::diagnosis::TemporaryExposureKeyExport::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TemporaryExposureKeyExport_contrac_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_TemporaryExposureKeyExport_contrac_2eproto}, {
      &scc_info_SignatureInfo_contrac_2eproto.base,
      &scc_info_TemporaryExposureKey_contrac_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_contrac_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_contrac_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_contrac_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_contrac_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::diagnosis::TemporaryExposureKeyExport, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::diagnosis::TemporaryExposureKeyExport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::diagnosis::TemporaryExposureKeyExport, start_timestamp_),
  PROTOBUF_FIELD_OFFSET(::diagnosis::TemporaryExposureKeyExport, end_timestamp_),
  PROTOBUF_FIELD_OFFSET(::diagnosis::TemporaryExposureKeyExport, region_),
  PROTOBUF_FIELD_OFFSET(::diagnosis::TemporaryExposureKeyExport, batch_num_),
  PROTOBUF_FIELD_OFFSET(::diagnosis::TemporaryExposureKeyExport, batch_size_),
  PROTOBUF_FIELD_OFFSET(::diagnosis::TemporaryExposureKeyExport, signature_infos_),
  PROTOBUF_FIELD_OFFSET(::diagnosis::TemporaryExposureKeyExport, keys_),
  1,
  2,
  0,
  3,
  4,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::diagnosis::SignatureInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::diagnosis::SignatureInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::diagnosis::SignatureInfo, app_bundle_id_),
  PROTOBUF_FIELD_OFFSET(::diagnosis::SignatureInfo, android_package_),
  PROTOBUF_FIELD_OFFSET(::diagnosis::SignatureInfo, verification_key_version_),
  PROTOBUF_FIELD_OFFSET(::diagnosis::SignatureInfo, verification_key_id_),
  PROTOBUF_FIELD_OFFSET(::diagnosis::SignatureInfo, signature_algorithm_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::diagnosis::TemporaryExposureKey, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::diagnosis::TemporaryExposureKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::diagnosis::TemporaryExposureKey, key_data_),
  PROTOBUF_FIELD_OFFSET(::diagnosis::TemporaryExposureKey, transmission_risk_level_),
  PROTOBUF_FIELD_OFFSET(::diagnosis::TemporaryExposureKey, rolling_start_interval_number_),
  PROTOBUF_FIELD_OFFSET(::diagnosis::TemporaryExposureKey, rolling_period_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::diagnosis::TEKSignatureList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::diagnosis::TEKSignatureList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::diagnosis::TEKSignatureList, signatures_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::diagnosis::TEKSignature, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::diagnosis::TEKSignature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::diagnosis::TEKSignature, signature_info_),
  PROTOBUF_FIELD_OFFSET(::diagnosis::TEKSignature, batch_num_),
  PROTOBUF_FIELD_OFFSET(::diagnosis::TEKSignature, batch_size_),
  PROTOBUF_FIELD_OFFSET(::diagnosis::TEKSignature, signature_),
  1,
  2,
  3,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, sizeof(::diagnosis::TemporaryExposureKeyExport)},
  { 19, 29, sizeof(::diagnosis::SignatureInfo)},
  { 34, 43, sizeof(::diagnosis::TemporaryExposureKey)},
  { 47, 53, sizeof(::diagnosis::TEKSignatureList)},
  { 54, 63, sizeof(::diagnosis::TEKSignature)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::diagnosis::_TemporaryExposureKeyExport_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::diagnosis::_SignatureInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::diagnosis::_TemporaryExposureKey_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::diagnosis::_TEKSignatureList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::diagnosis::_TEKSignature_default_instance_),
};

const char descriptor_table_protodef_contrac_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rcontrac.proto\022\tdiagnosis\"\345\001\n\032Temporary"
  "ExposureKeyExport\022\027\n\017start_timestamp\030\001 \002"
  "(\006\022\025\n\rend_timestamp\030\002 \002(\006\022\016\n\006region\030\003 \002("
  "\t\022\021\n\tbatch_num\030\004 \002(\005\022\022\n\nbatch_size\030\005 \002(\005"
  "\0221\n\017signature_infos\030\006 \003(\0132\030.diagnosis.Si"
  "gnatureInfo\022-\n\004keys\030\007 \003(\0132\037.diagnosis.Te"
  "mporaryExposureKey\"\233\001\n\rSignatureInfo\022\025\n\r"
  "app_bundle_id\030\001 \001(\t\022\027\n\017android_package\030\002"
  " \001(\t\022 \n\030verification_key_version\030\003 \001(\t\022\033"
  "\n\023verification_key_id\030\004 \001(\t\022\033\n\023signature"
  "_algorithm\030\005 \001(\t\"\215\001\n\024TemporaryExposureKe"
  "y\022\020\n\010key_data\030\001 \001(\014\022\037\n\027transmission_risk"
  "_level\030\002 \001(\005\022%\n\035rolling_start_interval_n"
  "umber\030\003 \001(\005\022\033\n\016rolling_period\030\004 \001(\005:\003144"
  "\"\?\n\020TEKSignatureList\022+\n\nsignatures\030\001 \003(\013"
  "2\027.diagnosis.TEKSignature\"z\n\014TEKSignatur"
  "e\0220\n\016signature_info\030\001 \001(\0132\030.diagnosis.Si"
  "gnatureInfo\022\021\n\tbatch_num\030\002 \001(\005\022\022\n\nbatch_"
  "size\030\003 \001(\005\022\021\n\tsignature\030\004 \001(\014"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_contrac_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_contrac_2eproto_sccs[5] = {
  &scc_info_SignatureInfo_contrac_2eproto.base,
  &scc_info_TEKSignature_contrac_2eproto.base,
  &scc_info_TEKSignatureList_contrac_2eproto.base,
  &scc_info_TemporaryExposureKey_contrac_2eproto.base,
  &scc_info_TemporaryExposureKeyExport_contrac_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_contrac_2eproto_once;
static bool descriptor_table_contrac_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_contrac_2eproto = {
  &descriptor_table_contrac_2eproto_initialized, descriptor_table_protodef_contrac_2eproto, "contrac.proto", 749,
  &descriptor_table_contrac_2eproto_once, descriptor_table_contrac_2eproto_sccs, descriptor_table_contrac_2eproto_deps, 5, 0,
  schemas, file_default_instances, TableStruct_contrac_2eproto::offsets,
  file_level_metadata_contrac_2eproto, 5, file_level_enum_descriptors_contrac_2eproto, file_level_service_descriptors_contrac_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_contrac_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_contrac_2eproto), true);
namespace diagnosis {

// ===================================================================

void TemporaryExposureKeyExport::InitAsDefaultInstance() {
}
class TemporaryExposureKeyExport::_Internal {
 public:
  using HasBits = decltype(std::declval<TemporaryExposureKeyExport>()._has_bits_);
  static void set_has_start_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_end_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_region(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_batch_num(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_batch_size(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

TemporaryExposureKeyExport::TemporaryExposureKeyExport()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:diagnosis.TemporaryExposureKeyExport)
}
TemporaryExposureKeyExport::TemporaryExposureKeyExport(const TemporaryExposureKeyExport& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      signature_infos_(from.signature_infos_),
      keys_(from.keys_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  region_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_region()) {
    region_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.region_);
  }
  ::memcpy(&start_timestamp_, &from.start_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&batch_size_) -
    reinterpret_cast<char*>(&start_timestamp_)) + sizeof(batch_size_));
  // @@protoc_insertion_point(copy_constructor:diagnosis.TemporaryExposureKeyExport)
}

void TemporaryExposureKeyExport::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TemporaryExposureKeyExport_contrac_2eproto.base);
  region_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&batch_size_) -
      reinterpret_cast<char*>(&start_timestamp_)) + sizeof(batch_size_));
}

TemporaryExposureKeyExport::~TemporaryExposureKeyExport() {
  // @@protoc_insertion_point(destructor:diagnosis.TemporaryExposureKeyExport)
  SharedDtor();
}

void TemporaryExposureKeyExport::SharedDtor() {
  region_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TemporaryExposureKeyExport::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TemporaryExposureKeyExport& TemporaryExposureKeyExport::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TemporaryExposureKeyExport_contrac_2eproto.base);
  return *internal_default_instance();
}


void TemporaryExposureKeyExport::Clear() {
// @@protoc_insertion_point(message_clear_start:diagnosis.TemporaryExposureKeyExport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signature_infos_.Clear();
  keys_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    region_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&start_timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&batch_size_) -
        reinterpret_cast<char*>(&start_timestamp_)) + sizeof(batch_size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TemporaryExposureKeyExport::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required fixed64 start_timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_start_timestamp(&has_bits);
          start_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // required fixed64 end_timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_end_timestamp(&has_bits);
          end_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // required string region = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_mutable_region(), ptr, ctx, "diagnosis.TemporaryExposureKeyExport.region");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 batch_num = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_batch_num(&has_bits);
          batch_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 batch_size = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_batch_size(&has_bits);
          batch_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .diagnosis.SignatureInfo signature_infos = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_signature_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .diagnosis.TemporaryExposureKey keys = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_keys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TemporaryExposureKeyExport::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:diagnosis.TemporaryExposureKeyExport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required fixed64 start_timestamp = 1;
  if (cached_has_bits & 0x00000002u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_start_timestamp(), target);
  }

  // required fixed64 end_timestamp = 2;
  if (cached_has_bits & 0x00000004u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_end_timestamp(), target);
  }

  // required string region = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_region().data(), static_cast<int>(this->_internal_region().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "diagnosis.TemporaryExposureKeyExport.region");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_region(), target);
  }

  // required int32 batch_num = 4;
  if (cached_has_bits & 0x00000008u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_batch_num(), target);
  }

  // required int32 batch_size = 5;
  if (cached_has_bits & 0x00000010u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_batch_size(), target);
  }

  // repeated .diagnosis.SignatureInfo signature_infos = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_signature_infos_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(6, this->_internal_signature_infos(i), target, stream);
  }

  // repeated .diagnosis.TemporaryExposureKey keys = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_keys_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(7, this->_internal_keys(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:diagnosis.TemporaryExposureKeyExport)
  return target;
}

size_t TemporaryExposureKeyExport::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:diagnosis.TemporaryExposureKeyExport)
  size_t total_size = 0;

  if (has_region()) {
    // required string region = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_region());
  }

  if (has_start_timestamp()) {
    // required fixed64 start_timestamp = 1;
    total_size += 1 + 8;
  }

  if (has_end_timestamp()) {
    // required fixed64 end_timestamp = 2;
    total_size += 1 + 8;
  }

  if (has_batch_num()) {
    // required int32 batch_num = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_batch_num());
  }

  if (has_batch_size()) {
    // required int32 batch_size = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_batch_size());
  }

  return total_size;
}
size_t TemporaryExposureKeyExport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:diagnosis.TemporaryExposureKeyExport)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string region = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_region());

    // required fixed64 start_timestamp = 1;
    total_size += 1 + 8;

    // required fixed64 end_timestamp = 2;
    total_size += 1 + 8;

    // required int32 batch_num = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_batch_num());

    // required int32 batch_size = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_batch_size());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .diagnosis.SignatureInfo signature_infos = 6;
  total_size += 1UL * this->_internal_signature_infos_size();
  for (const auto& msg : this->signature_infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .diagnosis.TemporaryExposureKey keys = 7;
  total_size += 1UL * this->_internal_keys_size();
  for (const auto& msg : this->keys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TemporaryExposureKeyExport::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:diagnosis.TemporaryExposureKeyExport)
  GOOGLE_DCHECK_NE(&from, this);
  const TemporaryExposureKeyExport* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TemporaryExposureKeyExport>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:diagnosis.TemporaryExposureKeyExport)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:diagnosis.TemporaryExposureKeyExport)
    MergeFrom(*source);
  }
}

void TemporaryExposureKeyExport::MergeFrom(const TemporaryExposureKeyExport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:diagnosis.TemporaryExposureKeyExport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  signature_infos_.MergeFrom(from.signature_infos_);
  keys_.MergeFrom(from.keys_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      region_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.region_);
    }
    if (cached_has_bits & 0x00000002u) {
      start_timestamp_ = from.start_timestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      end_timestamp_ = from.end_timestamp_;
    }
    if (cached_has_bits & 0x00000008u) {
      batch_num_ = from.batch_num_;
    }
    if (cached_has_bits & 0x00000010u) {
      batch_size_ = from.batch_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TemporaryExposureKeyExport::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:diagnosis.TemporaryExposureKeyExport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TemporaryExposureKeyExport::CopyFrom(const TemporaryExposureKeyExport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:diagnosis.TemporaryExposureKeyExport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TemporaryExposureKeyExport::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void TemporaryExposureKeyExport::InternalSwap(TemporaryExposureKeyExport* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  signature_infos_.InternalSwap(&other->signature_infos_);
  keys_.InternalSwap(&other->keys_);
  region_.Swap(&other->region_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(start_timestamp_, other->start_timestamp_);
  swap(end_timestamp_, other->end_timestamp_);
  swap(batch_num_, other->batch_num_);
  swap(batch_size_, other->batch_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TemporaryExposureKeyExport::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SignatureInfo::InitAsDefaultInstance() {
}
class SignatureInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<SignatureInfo>()._has_bits_);
  static void set_has_app_bundle_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_android_package(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_verification_key_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_verification_key_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_signature_algorithm(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

SignatureInfo::SignatureInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:diagnosis.SignatureInfo)
}
SignatureInfo::SignatureInfo(const SignatureInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  app_bundle_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_app_bundle_id()) {
    app_bundle_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.app_bundle_id_);
  }
  android_package_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_android_package()) {
    android_package_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.android_package_);
  }
  verification_key_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_verification_key_version()) {
    verification_key_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.verification_key_version_);
  }
  verification_key_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_verification_key_id()) {
    verification_key_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.verification_key_id_);
  }
  signature_algorithm_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_signature_algorithm()) {
    signature_algorithm_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.signature_algorithm_);
  }
  // @@protoc_insertion_point(copy_constructor:diagnosis.SignatureInfo)
}

void SignatureInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SignatureInfo_contrac_2eproto.base);
  app_bundle_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  android_package_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  verification_key_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  verification_key_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_algorithm_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SignatureInfo::~SignatureInfo() {
  // @@protoc_insertion_point(destructor:diagnosis.SignatureInfo)
  SharedDtor();
}

void SignatureInfo::SharedDtor() {
  app_bundle_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  android_package_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  verification_key_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  verification_key_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_algorithm_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SignatureInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SignatureInfo& SignatureInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SignatureInfo_contrac_2eproto.base);
  return *internal_default_instance();
}


void SignatureInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:diagnosis.SignatureInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      app_bundle_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      android_package_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      verification_key_version_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      verification_key_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      signature_algorithm_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SignatureInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string app_bundle_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_mutable_app_bundle_id(), ptr, ctx, "diagnosis.SignatureInfo.app_bundle_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string android_package = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_mutable_android_package(), ptr, ctx, "diagnosis.SignatureInfo.android_package");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string verification_key_version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_mutable_verification_key_version(), ptr, ctx, "diagnosis.SignatureInfo.verification_key_version");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string verification_key_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_mutable_verification_key_id(), ptr, ctx, "diagnosis.SignatureInfo.verification_key_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string signature_algorithm = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_mutable_signature_algorithm(), ptr, ctx, "diagnosis.SignatureInfo.signature_algorithm");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SignatureInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:diagnosis.SignatureInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string app_bundle_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_app_bundle_id().data(), static_cast<int>(this->_internal_app_bundle_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "diagnosis.SignatureInfo.app_bundle_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_app_bundle_id(), target);
  }

  // optional string android_package = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_android_package().data(), static_cast<int>(this->_internal_android_package().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "diagnosis.SignatureInfo.android_package");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_android_package(), target);
  }

  // optional string verification_key_version = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_verification_key_version().data(), static_cast<int>(this->_internal_verification_key_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "diagnosis.SignatureInfo.verification_key_version");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_verification_key_version(), target);
  }

  // optional string verification_key_id = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_verification_key_id().data(), static_cast<int>(this->_internal_verification_key_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "diagnosis.SignatureInfo.verification_key_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_verification_key_id(), target);
  }

  // optional string signature_algorithm = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_signature_algorithm().data(), static_cast<int>(this->_internal_signature_algorithm().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "diagnosis.SignatureInfo.signature_algorithm");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_signature_algorithm(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:diagnosis.SignatureInfo)
  return target;
}

size_t SignatureInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:diagnosis.SignatureInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string app_bundle_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_app_bundle_id());
    }

    // optional string android_package = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_android_package());
    }

    // optional string verification_key_version = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_verification_key_version());
    }

    // optional string verification_key_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_verification_key_id());
    }

    // optional string signature_algorithm = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_signature_algorithm());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SignatureInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:diagnosis.SignatureInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SignatureInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SignatureInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:diagnosis.SignatureInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:diagnosis.SignatureInfo)
    MergeFrom(*source);
  }
}

void SignatureInfo::MergeFrom(const SignatureInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:diagnosis.SignatureInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      app_bundle_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.app_bundle_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      android_package_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.android_package_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      verification_key_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.verification_key_version_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      verification_key_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.verification_key_id_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      signature_algorithm_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.signature_algorithm_);
    }
  }
}

void SignatureInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:diagnosis.SignatureInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignatureInfo::CopyFrom(const SignatureInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:diagnosis.SignatureInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignatureInfo::IsInitialized() const {
  return true;
}

void SignatureInfo::InternalSwap(SignatureInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  app_bundle_id_.Swap(&other->app_bundle_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  android_package_.Swap(&other->android_package_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  verification_key_version_.Swap(&other->verification_key_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  verification_key_id_.Swap(&other->verification_key_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  signature_algorithm_.Swap(&other->signature_algorithm_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata SignatureInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TemporaryExposureKey::InitAsDefaultInstance() {
}
class TemporaryExposureKey::_Internal {
 public:
  using HasBits = decltype(std::declval<TemporaryExposureKey>()._has_bits_);
  static void set_has_key_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_transmission_risk_level(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_rolling_start_interval_number(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_rolling_period(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

TemporaryExposureKey::TemporaryExposureKey()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:diagnosis.TemporaryExposureKey)
}
TemporaryExposureKey::TemporaryExposureKey(const TemporaryExposureKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_key_data()) {
    key_data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_data_);
  }
  ::memcpy(&transmission_risk_level_, &from.transmission_risk_level_,
    static_cast<size_t>(reinterpret_cast<char*>(&rolling_period_) -
    reinterpret_cast<char*>(&transmission_risk_level_)) + sizeof(rolling_period_));
  // @@protoc_insertion_point(copy_constructor:diagnosis.TemporaryExposureKey)
}

void TemporaryExposureKey::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TemporaryExposureKey_contrac_2eproto.base);
  key_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&transmission_risk_level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rolling_start_interval_number_) -
      reinterpret_cast<char*>(&transmission_risk_level_)) + sizeof(rolling_start_interval_number_));
  rolling_period_ = 144;
}

TemporaryExposureKey::~TemporaryExposureKey() {
  // @@protoc_insertion_point(destructor:diagnosis.TemporaryExposureKey)
  SharedDtor();
}

void TemporaryExposureKey::SharedDtor() {
  key_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TemporaryExposureKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TemporaryExposureKey& TemporaryExposureKey::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TemporaryExposureKey_contrac_2eproto.base);
  return *internal_default_instance();
}


void TemporaryExposureKey::Clear() {
// @@protoc_insertion_point(message_clear_start:diagnosis.TemporaryExposureKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    key_data_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&transmission_risk_level_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rolling_start_interval_number_) -
        reinterpret_cast<char*>(&transmission_risk_level_)) + sizeof(rolling_start_interval_number_));
    rolling_period_ = 144;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TemporaryExposureKey::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes key_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_key_data(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 transmission_risk_level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_transmission_risk_level(&has_bits);
          transmission_risk_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 rolling_start_interval_number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_rolling_start_interval_number(&has_bits);
          rolling_start_interval_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 rolling_period = 4 [default = 144];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_rolling_period(&has_bits);
          rolling_period_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TemporaryExposureKey::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:diagnosis.TemporaryExposureKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes key_data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_key_data(), target);
  }

  // optional int32 transmission_risk_level = 2;
  if (cached_has_bits & 0x00000002u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_transmission_risk_level(), target);
  }

  // optional int32 rolling_start_interval_number = 3;
  if (cached_has_bits & 0x00000004u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_rolling_start_interval_number(), target);
  }

  // optional int32 rolling_period = 4 [default = 144];
  if (cached_has_bits & 0x00000008u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_rolling_period(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:diagnosis.TemporaryExposureKey)
  return target;
}

size_t TemporaryExposureKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:diagnosis.TemporaryExposureKey)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes key_data = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_key_data());
    }

    // optional int32 transmission_risk_level = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_transmission_risk_level());
    }

    // optional int32 rolling_start_interval_number = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_rolling_start_interval_number());
    }

    // optional int32 rolling_period = 4 [default = 144];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_rolling_period());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TemporaryExposureKey::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:diagnosis.TemporaryExposureKey)
  GOOGLE_DCHECK_NE(&from, this);
  const TemporaryExposureKey* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TemporaryExposureKey>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:diagnosis.TemporaryExposureKey)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:diagnosis.TemporaryExposureKey)
    MergeFrom(*source);
  }
}

void TemporaryExposureKey::MergeFrom(const TemporaryExposureKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:diagnosis.TemporaryExposureKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      key_data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_data_);
    }
    if (cached_has_bits & 0x00000002u) {
      transmission_risk_level_ = from.transmission_risk_level_;
    }
    if (cached_has_bits & 0x00000004u) {
      rolling_start_interval_number_ = from.rolling_start_interval_number_;
    }
    if (cached_has_bits & 0x00000008u) {
      rolling_period_ = from.rolling_period_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TemporaryExposureKey::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:diagnosis.TemporaryExposureKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TemporaryExposureKey::CopyFrom(const TemporaryExposureKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:diagnosis.TemporaryExposureKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TemporaryExposureKey::IsInitialized() const {
  return true;
}

void TemporaryExposureKey::InternalSwap(TemporaryExposureKey* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  key_data_.Swap(&other->key_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(transmission_risk_level_, other->transmission_risk_level_);
  swap(rolling_start_interval_number_, other->rolling_start_interval_number_);
  swap(rolling_period_, other->rolling_period_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TemporaryExposureKey::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TEKSignatureList::InitAsDefaultInstance() {
}
class TEKSignatureList::_Internal {
 public:
  using HasBits = decltype(std::declval<TEKSignatureList>()._has_bits_);
};

TEKSignatureList::TEKSignatureList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:diagnosis.TEKSignatureList)
}
TEKSignatureList::TEKSignatureList(const TEKSignatureList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      signatures_(from.signatures_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:diagnosis.TEKSignatureList)
}

void TEKSignatureList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TEKSignatureList_contrac_2eproto.base);
}

TEKSignatureList::~TEKSignatureList() {
  // @@protoc_insertion_point(destructor:diagnosis.TEKSignatureList)
  SharedDtor();
}

void TEKSignatureList::SharedDtor() {
}

void TEKSignatureList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TEKSignatureList& TEKSignatureList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TEKSignatureList_contrac_2eproto.base);
  return *internal_default_instance();
}


void TEKSignatureList::Clear() {
// @@protoc_insertion_point(message_clear_start:diagnosis.TEKSignatureList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signatures_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TEKSignatureList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .diagnosis.TEKSignature signatures = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_signatures(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TEKSignatureList::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:diagnosis.TEKSignatureList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .diagnosis.TEKSignature signatures = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_signatures_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_signatures(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:diagnosis.TEKSignatureList)
  return target;
}

size_t TEKSignatureList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:diagnosis.TEKSignatureList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .diagnosis.TEKSignature signatures = 1;
  total_size += 1UL * this->_internal_signatures_size();
  for (const auto& msg : this->signatures_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TEKSignatureList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:diagnosis.TEKSignatureList)
  GOOGLE_DCHECK_NE(&from, this);
  const TEKSignatureList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TEKSignatureList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:diagnosis.TEKSignatureList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:diagnosis.TEKSignatureList)
    MergeFrom(*source);
  }
}

void TEKSignatureList::MergeFrom(const TEKSignatureList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:diagnosis.TEKSignatureList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  signatures_.MergeFrom(from.signatures_);
}

void TEKSignatureList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:diagnosis.TEKSignatureList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TEKSignatureList::CopyFrom(const TEKSignatureList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:diagnosis.TEKSignatureList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TEKSignatureList::IsInitialized() const {
  return true;
}

void TEKSignatureList::InternalSwap(TEKSignatureList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  signatures_.InternalSwap(&other->signatures_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TEKSignatureList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TEKSignature::InitAsDefaultInstance() {
  ::diagnosis::_TEKSignature_default_instance_._instance.get_mutable()->signature_info_ = const_cast< ::diagnosis::SignatureInfo*>(
      ::diagnosis::SignatureInfo::internal_default_instance());
}
class TEKSignature::_Internal {
 public:
  using HasBits = decltype(std::declval<TEKSignature>()._has_bits_);
  static const ::diagnosis::SignatureInfo& signature_info(const TEKSignature* msg);
  static void set_has_signature_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_batch_num(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_batch_size(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::diagnosis::SignatureInfo&
TEKSignature::_Internal::signature_info(const TEKSignature* msg) {
  return *msg->signature_info_;
}
TEKSignature::TEKSignature()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:diagnosis.TEKSignature)
}
TEKSignature::TEKSignature(const TEKSignature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_signature()) {
    signature_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  if (from._internal_has_signature_info()) {
    signature_info_ = new ::diagnosis::SignatureInfo(*from.signature_info_);
  } else {
    signature_info_ = nullptr;
  }
  ::memcpy(&batch_num_, &from.batch_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&batch_size_) -
    reinterpret_cast<char*>(&batch_num_)) + sizeof(batch_size_));
  // @@protoc_insertion_point(copy_constructor:diagnosis.TEKSignature)
}

void TEKSignature::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TEKSignature_contrac_2eproto.base);
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&signature_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&batch_size_) -
      reinterpret_cast<char*>(&signature_info_)) + sizeof(batch_size_));
}

TEKSignature::~TEKSignature() {
  // @@protoc_insertion_point(destructor:diagnosis.TEKSignature)
  SharedDtor();
}

void TEKSignature::SharedDtor() {
  signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete signature_info_;
}

void TEKSignature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TEKSignature& TEKSignature::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TEKSignature_contrac_2eproto.base);
  return *internal_default_instance();
}


void TEKSignature::Clear() {
// @@protoc_insertion_point(message_clear_start:diagnosis.TEKSignature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      signature_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(signature_info_ != nullptr);
      signature_info_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&batch_num_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&batch_size_) -
        reinterpret_cast<char*>(&batch_num_)) + sizeof(batch_size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TEKSignature::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .diagnosis.SignatureInfo signature_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_signature_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 batch_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_batch_num(&has_bits);
          batch_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 batch_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_batch_size(&has_bits);
          batch_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes signature = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_signature(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TEKSignature::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:diagnosis.TEKSignature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .diagnosis.SignatureInfo signature_info = 1;
  if (cached_has_bits & 0x00000002u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::signature_info(this), target, stream);
  }

  // optional int32 batch_num = 2;
  if (cached_has_bits & 0x00000004u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_batch_num(), target);
  }

  // optional int32 batch_size = 3;
  if (cached_has_bits & 0x00000008u) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_batch_size(), target);
  }

  // optional bytes signature = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_signature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:diagnosis.TEKSignature)
  return target;
}

size_t TEKSignature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:diagnosis.TEKSignature)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes signature = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_signature());
    }

    // optional .diagnosis.SignatureInfo signature_info = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *signature_info_);
    }

    // optional int32 batch_num = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_batch_num());
    }

    // optional int32 batch_size = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_batch_size());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TEKSignature::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:diagnosis.TEKSignature)
  GOOGLE_DCHECK_NE(&from, this);
  const TEKSignature* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TEKSignature>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:diagnosis.TEKSignature)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:diagnosis.TEKSignature)
    MergeFrom(*source);
  }
}

void TEKSignature::MergeFrom(const TEKSignature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:diagnosis.TEKSignature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      signature_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.signature_);
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_signature_info()->::diagnosis::SignatureInfo::MergeFrom(from._internal_signature_info());
    }
    if (cached_has_bits & 0x00000004u) {
      batch_num_ = from.batch_num_;
    }
    if (cached_has_bits & 0x00000008u) {
      batch_size_ = from.batch_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TEKSignature::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:diagnosis.TEKSignature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TEKSignature::CopyFrom(const TEKSignature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:diagnosis.TEKSignature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TEKSignature::IsInitialized() const {
  return true;
}

void TEKSignature::InternalSwap(TEKSignature* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  signature_.Swap(&other->signature_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(signature_info_, other->signature_info_);
  swap(batch_num_, other->batch_num_);
  swap(batch_size_, other->batch_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TEKSignature::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace diagnosis
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::diagnosis::TemporaryExposureKeyExport* Arena::CreateMaybeMessage< ::diagnosis::TemporaryExposureKeyExport >(Arena* arena) {
  return Arena::CreateInternal< ::diagnosis::TemporaryExposureKeyExport >(arena);
}
template<> PROTOBUF_NOINLINE ::diagnosis::SignatureInfo* Arena::CreateMaybeMessage< ::diagnosis::SignatureInfo >(Arena* arena) {
  return Arena::CreateInternal< ::diagnosis::SignatureInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::diagnosis::TemporaryExposureKey* Arena::CreateMaybeMessage< ::diagnosis::TemporaryExposureKey >(Arena* arena) {
  return Arena::CreateInternal< ::diagnosis::TemporaryExposureKey >(arena);
}
template<> PROTOBUF_NOINLINE ::diagnosis::TEKSignatureList* Arena::CreateMaybeMessage< ::diagnosis::TEKSignatureList >(Arena* arena) {
  return Arena::CreateInternal< ::diagnosis::TEKSignatureList >(arena);
}
template<> PROTOBUF_NOINLINE ::diagnosis::TEKSignature* Arena::CreateMaybeMessage< ::diagnosis::TEKSignature >(Arena* arena) {
  return Arena::CreateInternal< ::diagnosis::TEKSignature >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
